{
  "info": {
    "name": "Mankind Product API Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Collection for testing the Mankind Product Service API endpoints"
  },
  "item": [
    {
      "name": "Product Management",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/products?page=0&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Response is paginated\", function () {",
                  "    pm.expect(json).to.have.property('content');",
                  "    pm.expect(json).to.have.property('totalElements');",
                  "    pm.expect(json).to.have.property('totalPages');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products", "{{product_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Product details are correct\", function () {",
                  "    pm.expect(json).to.have.property('id');",
                  "    pm.expect(json).to.have.property('name');",
                  "    pm.expect(json).to.have.property('description');",
                  "    pm.expect(json).to.have.property('categoryId');",
                  "    pm.expect(json.id).to.equal(parseInt(pm.environment.get(\"product_id\")));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Products by Category",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/products/category/{{category_id}}?page=0&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products", "category", "{{category_id}}"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Response is paginated and contains products\", function () {",
                  "    pm.expect(json).to.have.property('content');",
                  "    pm.expect(json.content).to.be.an('array');",
                  "    if (json.content.length > 0) {",
                  "        pm.expect(json.content[0]).to.have.property('categoryId');",
                  "        pm.expect(json.content[0].categoryId).to.equal(parseInt(pm.environment.get(\"category_id\")));",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Featured Products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/products/featured?page=0&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products", "featured"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Response contains featured products\", function () {",
                  "    pm.expect(json).to.have.property('content');",
                  "    pm.expect(json.content).to.be.an('array');",
                  "    if (json.content.length > 0) {",
                  "        pm.expect(json.content[0]).to.have.property('isFeatured', true);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"NeuraX AI Processor\",\n  \"brand\": \"NeuraTech\",\n  \"categoryId\": 1,\n  \"description\": \"Advanced AI processor with 64 cores\",\n  \"sku\": \"NX-64C\",\n  \"model\": \"AI-2000\",\n  \"specifications\": {\n    \"cores\": \"64\",\n    \"clockSpeed\": \"3.2GHz\",\n    \"aiEngine\": \"v2\"\n  },\n  \"images\": [\n    \"https://example.com/images/neurax.jpg\"\n  ],\n  \"isFeatured\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/products",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Product created successfully\", function () {",
                  "    pm.expect(json).to.have.property('id');",
                  "    pm.expect(json.name).to.equal(\"NeuraX AI Processor\");",
                  "    pm.expect(json.isFeatured).to.be.true;",
                  "    pm.environment.set(\"product_id\", json.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"NeuraX AI Processor v2\",\n  \"brand\": \"NeuraTech\",\n  \"categoryId\": 1,\n  \"description\": \"Updated AI processor with 128 cores\",\n  \"sku\": \"NX-128C\",\n  \"model\": \"AI-3000\",\n  \"specifications\": {\n    \"cores\": \"128\",\n    \"clockSpeed\": \"4.0GHz\",\n    \"aiEngine\": \"v3\"\n  },\n  \"images\": [\n    \"https://example.com/images/neurax-v2.jpg\"\n  ],\n  \"isFeatured\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products", "{{product_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Product updated successfully\", function () {",
                  "    pm.expect(json.id).to.equal(parseInt(pm.environment.get(\"product_id\")));",
                  "    pm.expect(json.name).to.equal(\"NeuraX AI Processor v2\");",
                  "    pm.expect(json.sku).to.equal(\"NX-128C\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Toggle Featured Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/products/{{product_id}}/featured",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products", "{{product_id}}", "featured"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Featured status toggled\", function () {",
                  "    pm.expect(json.id).to.equal(parseInt(pm.environment.get(\"product_id\")));",
                  "    pm.expect(json).to.have.property('isFeatured');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Product",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/products/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "products", "{{product_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Inventory Management",
      "item": [
        {
          "name": "Create Inventory",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 1799.00,\n  \"currency\": \"USD\",\n  \"availableQuantity\": 15,\n  \"minStockLevel\": 8,\n  \"maxStockLevel\": 100,\n  \"reorderPoint\": 20\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/inventory/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "inventory", "{{product_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Inventory created successfully\", function () {",
                  "    pm.expect(json.productId).to.equal(parseInt(pm.environment.get(\"product_id\")));",
                  "    pm.expect(json.price).to.equal(1799.00);",
                  "    pm.expect(json.currency).to.equal(\"USD\");",
                  "    pm.expect(json.availableQuantity).to.equal(15);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Inventory",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/inventory/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "inventory", "{{product_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Inventory details are correct\", function () {",
                  "    pm.expect(json.productId).to.equal(parseInt(pm.environment.get(\"product_id\")));",
                  "    pm.expect(json).to.have.property('price');",
                  "    pm.expect(json).to.have.property('availableQuantity');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Inventory Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/inventory/{{product_id}}/status",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "inventory", "{{product_id}}", "status"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Status details are correct\", function () {",
                  "    pm.expect(json).to.have.property('availableQuantity');",
                  "    pm.expect(json).to.have.property('inStock');",
                  "    pm.expect(json).to.have.property('needsReorder');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Inventory",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 1899.00,\n  \"currency\": \"USD\",\n  \"availableQuantity\": 20,\n  \"minStockLevel\": 10,\n  \"maxStockLevel\": 120,\n  \"reorderPoint\": 25\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/inventory/{{product_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "inventory", "{{product_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Inventory updated successfully\", function () {",
                  "    pm.expect(json.productId).to.equal(parseInt(pm.environment.get(\"product_id\")));",
                  "    pm.expect(json.price).to.equal(1899.00);",
                  "    pm.expect(json.availableQuantity).to.equal(20);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Inventory Logs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/inventory/{{product_id}}/logs",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "inventory", "{{product_id}}", "logs"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Logs are returned as array\", function () {",
                  "    pm.expect(json).to.be.an('array');",
                  "    if (json.length > 0) {",
                  "        pm.expect(json[0]).to.have.property('actionType');",
                  "        pm.expect(json[0]).to.have.property('quantity');",
                  "        pm.expect(json[0]).to.have.property('createdAt');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Category Management",
      "item": [
        {
          "name": "Get All Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "categories"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Categories are returned as array\", function () {",
                  "    pm.expect(json).to.be.an('array');",
                  "    if (json.length > 0) {",
                  "        pm.expect(json[0]).to.have.property('id');",
                  "        pm.expect(json[0]).to.have.property('name');",
                  "        pm.environment.set(\"category_id\", json[0].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Category by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "categories", "{{category_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Category details are correct\", function () {",
                  "    pm.expect(json.id).to.equal(parseInt(pm.environment.get(\"category_id\")));",
                  "    pm.expect(json).to.have.property('name');",
                  "    pm.expect(json).to.have.property('description');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"AI Processors\",\n  \"description\": \"Advanced AI and machine learning processors\",\n  \"parentId\": null\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/categories",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "categories"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Category created successfully\", function () {",
                  "    pm.expect(json).to.have.property('id');",
                  "    pm.expect(json.name).to.equal(\"AI Processors\");",
                  "    pm.expect(json.description).to.equal(\"Advanced AI and machine learning processors\");",
                  "    pm.environment.set(\"category_id\", json.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Category",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"AI & ML Processors\",\n  \"description\": \"Advanced AI and machine learning processors and accelerators\",\n  \"parentId\": null\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "categories", "{{category_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "let json = pm.response.json();",
                  "pm.test(\"Category updated successfully\", function () {",
                  "    pm.expect(json.id).to.equal(parseInt(pm.environment.get(\"category_id\")));",
                  "    pm.expect(json.name).to.equal(\"AI & ML Processors\");",
                  "    pm.expect(json.description).to.equal(\"Advanced AI and machine learning processors and accelerators\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}
